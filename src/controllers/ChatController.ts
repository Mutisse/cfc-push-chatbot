// src/controllers/ChatController.ts
import { Request, Response } from "express";
import { logger } from "../config/logger";
import { UserStateService } from "../services/UserStateService";
import { WhatsAppService } from "../services/WhatsAppService";
import { MenuManager } from "../models/MenuManager";

export class ChatController {
  async handleWebhook(req: Request, res: Response): Promise<void> {
    try {
      // ‚úÖ FORMATO TWILIO - Corrigir extra√ß√£o de dados
      const userMessage = req.body.Body;
      const userPhone = req.body.From.replace("whatsapp:", "");

      logger.info(`üì± Mensagem de ${userPhone}: "${userMessage}"`);

      // ‚úÖ VALIDA√á√ÉO: Ignorar mensagens do pr√≥prio sistema Twilio
      if (
        userPhone === "+14155238886" ||
        !userMessage ||
        userMessage === "undefined" ||
        userMessage.trim() === ""
      ) {
        logger.warn(`‚ö†Ô∏è Mensagem inv√°lida ignorada de: ${userPhone}`);

        const emptyResponse = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
</Response>`;

        res.type("text/xml");
        res.send(emptyResponse);
        return;
      }

      // Buscar estado atual do usu√°rio
      const userSession = await UserStateService.getState(userPhone);
      const currentStep = userSession?.step || "WELCOME";

      let responseText = "";
      let buttons: any[] = [];

      // ‚úÖ CORRIGIR: Processar mensagem baseada no estado atual
      switch (currentStep) {
        case "WELCOME":
          const welcomeResponse = await this.handleWelcome(
            userMessage,
            userPhone
          );
          responseText = welcomeResponse.text;
          buttons = welcomeResponse.buttons || [];
          break;

        case "MAIN_MENU":
          const mainMenuResponse = await this.handleMainMenu(
            userMessage,
            userPhone
          );
          responseText = mainMenuResponse.text;
          buttons = mainMenuResponse.buttons || [];
          break;

        case "PUSH_INVEST_MENU":
          const pushInvestResponse = await this.handlePushInvestMenu(
            userMessage,
            userPhone
          );
          responseText = pushInvestResponse.text;
          buttons = pushInvestResponse.buttons || [];
          break;

        case "PUSH_INVEST_PROJETOS":
          responseText = await this.handlePushInvestProjetos(
            userMessage,
            userPhone
          );
          break;

        case "PUSH_INVEST_INVESTIR":
          responseText = await this.handlePushInvestInvestir(
            userMessage,
            userPhone
          );
          break;

        case "PUSH_INVEST_CONTATO":
          responseText = await this.handlePushInvestContato(
            userMessage,
            userPhone
          );
          break;

        case "CADASTRO_NOME":
          responseText = await this.handleCadastroNome(userMessage, userPhone);
          break;

        case "CADASTRO_DATA_NASCIMENTO":
          responseText = await this.handleCadastroDataNascimento(
            userMessage,
            userPhone
          );
          break;

        case "CADASTRO_ESTADO_CIVIL":
          responseText = await this.handleCadastroEstadoCivil(
            userMessage,
            userPhone
          );
          break;

        case "CADASTRO_ENDERECO":
          responseText = await this.handleCadastroEndereco(
            userMessage,
            userPhone
          );
          break;

        case "CADASTRO_PROFISSAO":
          responseText = await this.handleCadastroProfissao(
            userMessage,
            userPhone
          );
          break;

        case "CADASTRO_COMO_CONHECEU":
          responseText = await this.handleCadastroComoConheceu(
            userMessage,
            userPhone
          );
          break;

        case "ORACAO_TIPO":
          const oracaoResponse = await this.handleOracaoTipo(
            userMessage,
            userPhone
          );
          responseText = oracaoResponse.text;
          buttons = oracaoResponse.buttons || [];
          break;

        case "ORACAO_DETALHE":
          responseText = await this.handleOracaoDetalhe(userMessage, userPhone);
          break;

        case "ORACAO_ANONIMATO":
          responseText = await this.handleOracaoAnonimato(
            userMessage,
            userPhone
          );
          break;

        case "ORACAO_NOME_FAMILIA":
          responseText = await this.handleOracaoNomeFamilia(
            userMessage,
            userPhone
          );
          break;

        case "VISITA_DATA":
          responseText = await this.handleVisitaData(userMessage, userPhone);
          break;

        case "VISITA_MOTIVO":
          responseText = await this.handleVisitaMotivo(userMessage, userPhone);
          break;

        case "NUCLEO_REGIAO":
          const nucleoResponse = await this.handleNucleoRegiao(
            userMessage,
            userPhone
          );
          responseText = nucleoResponse.text;
          buttons = nucleoResponse.buttons || [];
          break;

        case "MINISTERIO_TIPO":
          const ministerioResponse = await this.handleMinisterioTipo(
            userMessage,
            userPhone
          );
          responseText = ministerioResponse.text;
          buttons = ministerioResponse.buttons || [];
          break;

        case "ASSISTENCIA_TIPO":
          const assistenciaResponse = await this.handleAssistenciaTipo(
            userMessage,
            userPhone
          );
          responseText = assistenciaResponse.text;
          buttons = assistenciaResponse.buttons || [];
          break;

        case "ASSISTENCIA_DETALHE":
          responseText = await this.handleAssistenciaDetalhe(
            userMessage,
            userPhone
          );
          break;

        case "TRANSFERENCIA_IGREJA_ORIGEM":
          responseText = await this.handleTransferenciaIgrejaOrigem(
            userMessage,
            userPhone
          );
          break;

        case "TRANSFERENCIA_MOTIVO":
          responseText = await this.handleTransferenciaMotivo(
            userMessage,
            userPhone
          );
          break;

        case "ATUALIZACAO_DADOS_TIPO":
          responseText = await this.handleAtualizacaoDadosTipo(
            userMessage,
            userPhone
          );
          break;

        case "ATUALIZACAO_DADOS_NOVO_VALOR":
          responseText = await this.handleAtualizacaoDadosNovoValor(
            userMessage,
            userPhone
          );
          break;

        case "DIREITOS_DEVERES":
          responseText = await this.handleDireitosDeveres(
            userMessage,
            userPhone
          );
          break;

        default:
          const defaultResponse = await this.handleWelcome(
            userMessage,
            userPhone
          );
          responseText = defaultResponse.text;
          buttons = defaultResponse.buttons || [];
      }

      // ‚úÖ ENVIAR VIA WHATSAPP SERVICE
      await this.sendWhatsAppMessage(userPhone, responseText, buttons);

      // ‚úÖ Resposta vazia para o Twilio (IMPORTANTE para Twilio)
      const emptyResponse = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
</Response>`;

      res.type("text/xml");
      res.send(emptyResponse);

      logger.info(
        `‚úÖ Resposta enviada via WhatsApp para ${userPhone}: ${currentStep}`
      );
    } catch (error) {
      logger.error("‚ùå Erro no webhook:", error);

      // ‚úÖ Tentar enviar mensagem de erro via WhatsApp
      try {
        const userPhone = req.body.From
          ? req.body.From.replace("whatsapp:", "")
          : "unknown";
        await WhatsAppService.sendTextMessage(
          userPhone,
          "‚ùå Desculpe, ocorreu um erro no servidor. Por favor, tente novamente."
        );
      } catch (whatsappError) {
        logger.error(
          "‚ùå Erro ao enviar mensagem de erro via WhatsApp:",
          whatsappError
        );
      }

      const errorTwiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
</Response>`;

      res.type("text/xml");
      res.send(errorTwiml);
    }
  }

  // ‚úÖ M√âTODO: Enviar mensagem via WhatsAppService (CORRIGIDO)
  private async sendWhatsAppMessage(
    phone: string,
    text: string,
    buttons?: any[]
  ): Promise<void> {
    try {
      if (buttons && buttons.length > 0) {
        // Se tem bot√µes, enviar mensagem interativa
        await WhatsAppService.sendInteractiveButtons(phone, text, buttons);
      } else {
        // Se n√£o tem bot√µes, enviar mensagem de texto simples
        await WhatsAppService.sendTextMessage(phone, text);
      }
    } catch (error) {
      logger.error(`‚ùå Erro ao enviar mensagem WhatsApp para ${phone}:`, error);
      throw error;
    }
  }

  // ‚úÖ M√âTODO: Enviar mensagem de boas-vindas inicial
  public async sendWelcomeMessage(phone: string): Promise<void> {
    try {
      await WhatsAppService.sendWelcomeMessage(phone);

      // Aguardar 2 segundos e enviar o menu principal
      setTimeout(async () => {
        const welcomeResponse = await this.handleWelcome("", phone);
        await this.sendWhatsAppMessage(
          phone,
          welcomeResponse.text,
          welcomeResponse.buttons
        );
      }, 2000);
    } catch (error) {
      logger.error(
        `‚ùå Erro ao enviar mensagem de boas-vindas para ${phone}:`,
        error
      );
    }
  }

  // üéØ MENSAGEM DE BOAS-VINDAS COM BOT√ïES
  private async handleWelcome(
    message: string,
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    await UserStateService.setState(phone, "MAIN_MENU");

    const welcomeText = `üèõÔ∏è *CFC PUSH - Igreja da Fam√≠lia Crist√£*\n\nShalom! üëã Agradecemos por entrar em contato connosco. Somos a Igreja da Fam√≠lia Crist√£ - CFC PUSH - *Onde Oramos At√© Algo Acontecer!*\n\n*Para continuar, selecione uma das op√ß√µes abaixo:*\n\nüí° *Navega√ß√£o r√°pida:*\nDigite [#] para voltar ao menu principal`;

    const buttons = [
      { id: "1", text: "üìù Ser Membro" },
      { id: "2", text: "üôè Ora√ß√£o" },
      { id: "3", text: "üë®‚Äçüíº Pastor" },
      { id: "4", text: "‚è∞ Cultos" },
      { id: "5", text: "üíù Contribuir" },
      { id: "6", text: "üè† Visita" },
      { id: "7", text: "ü§ù Assist√™ncia" },
      { id: "8", text: "üîî N√∫cleos" },
      { id: "9", text: "üéµ Minist√©rios" },
      { id: "10", text: "üéØ Evangeliza√ß√£o" },
      { id: "11", text: "ü§ù Servos" },
      { id: "12", text: "üõçÔ∏è Loja" },
      { id: "13", text: "üìç Localiza√ß√£o" },
      { id: "14", text: "üí∞ PUSH Invest" },
      { id: "15", text: "‚ùå Encerrar" },
    ];

    return {
      text: welcomeText,
      buttons: buttons,
    };
  }

  // üéØ MANIPULAR MENU PRINCIPAL
  private async handleMainMenu(
    message: string,
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    const normalizedMessage = message.trim();

    // ‚úÖ CORRIGIR: Tratamento de sauda√ß√µes
    const sauda√ß√µes = [
      "shalom",
      "bom dia",
      "boa tarde",
      "boa noite",
      "ol√°",
      "ola",
      "salve",
      "oi",
      "hi",
      "hello",
    ];
    if (sauda√ß√µes.includes(normalizedMessage.toLowerCase())) {
      return await this.handleWelcome("", phone);
    }

    // Navega√ß√£o r√°pida
    if (normalizedMessage === "#") {
      return await this.handleWelcome("", phone);
    }

    // Op√ß√µes principais
    if (this.isValidMenuOption(normalizedMessage, 1, 15)) {
      switch (normalizedMessage) {
        case "1":
          return await this.handleSerMembroSubmenu(phone);

        case "2":
          return await this.handleOracaoTipo("", phone);

        case "3":
          return {
            text: `üë®‚Äçüíº *FALAR COM PASTOR*\n\n*Contatos Diretos:*\nüìû Telefone: +258 84 123 4567\n‚úâÔ∏è E-mail: pastor@cfcpush.org\n\n*Hor√°rios de Atendimento:*\nSegunda a Sexta: 14h-18h\nS√°bado: 9h-12h\n\n*Local:* Gabinete Pastoral - Sede CFC PUSH\n\nDigite [#] para menu principal`,
          };

        case "4":
          return {
            text: `‚è∞ *CULTOS E HOR√ÅRIOS*\n\n*Hor√°rios Regulares:*\n\nüìÖ *DOMINGO*\n8h30 - Culto de Celebra√ß√£o Principal\n\nüìÖ *QUARTA-FEIRA*\n18h00 - Ora√ß√£o e Estudo B√≠blico\n\nüìÖ *SEXTA-FEIRA*\n18h00 - CFC PUSH Jovens\n\nüìÖ *S√ÅBADO*\n16h00 - Escola B√≠blica e Discipulado\n\n*Eventos Especiais:*\n‚Ä¢ Vig√≠lias Mensais\n‚Ä¢ Confer√™ncias Trimestrais\n‚Ä¢ Batismos (consulte datas)\n\n*Transmiss√£o Online:*\nDispon√≠vel em nosso site\n\nDigite [#] para menu principal`,
          };

        case "5":
          return {
            text: `üíù *CONTRIBUI√á√ïES E DOA√á√ïES*\n\n*Agradecemos sua generosidade!*\n\n*M√©todos de Contribui√ß√£o:*\n\nüè¶ *Transfer√™ncia Banc√°ria:*\nBanco: BCI\nConta: 123456789012\nNIB: 0008000123456789012\n\nüì± *Mobile Money (M-Pesa):*\nN√∫mero: +258 84 500 6000\nNome: CFC PUSH Igreja\n\nüíµ *Coleta nos Cultos:*\nDurante os cultos presenciais\n\n*Transpar√™ncia:*\nRelat√≥rios financeiros dispon√≠veis mensalmente\n\nDigite [#] para menu principal`,
          };

        case "6":
          await UserStateService.setState(phone, "VISITA_DATA");
          return {
            text: "üè† *VISITA PASTORAL*\n\nQual a melhor *data* para visita? (ex: 25/12/2024)\n\n*Formato:* DD/MM/AAAA",
          };

        case "7":
          return await this.handleAssistenciaTipo("", phone);

        case "8":
          return await this.handleNucleoRegiao("", phone);

        case "9":
          return await this.handleMinisterioTipo("", phone);

        case "10":
          return {
            text: `üéØ *CAMPANHAS DE EVANGELIZA√á√ÉO*\n\n*Pr√≥ximos Eventos:*\n\nüîπ *Evangelismo de Rua*\nS√°bado, 15h00 - Centro da Cidade\n\nüîπ *Visita√ß√£o Hospitalar*\nQuintas, 10h00 - Hospital Central\n\nüîπ *Campanha Jovens*\nSextas, 18h00 - Sede CFC PUSH\n\n*Como Participar:*\nCompare√ßa aos treinamentos ou entre em contato com o Minist√©rio de Evangeliza√ß√£o\n\nüìû Contato: +258 84 700 8000\n\nDigite [#] para menu principal`,
          };

        case "11":
          return {
            text: `ü§ù *SERVI√áO E VOLUNTARIADO*\n\n*√Åreas de Servi√ßo Dispon√≠veis:*\n\n‚Ä¢ Recep√ß√£o e Acolhimento\n‚Ä¢ Limpeza e Manuten√ß√£o\n‚Ä¢ M√≠dia e Tecnologia\n‚Ä¢ Intercess√£o e Ora√ß√£o\n‚Ä¢ Evangelismo e Miss√µes\n‚Ä¢ A√ß√£o Social\n\n*Treinamentos:*\nPrimeiro S√°bado de cada m√™s, 14h00\n\n*Contato:*\nüìû +258 84 900 1000\n‚úâÔ∏è servos@cfcpush.org\n\nDigite [#] para menu principal`,
          };

        case "12":
          return {
            text: `üõçÔ∏è *CENTRAL STORE CFC PUSH*\n\n*Produtos Dispon√≠veis:*\n\nüìö *Livros e B√≠blias:*\n‚Ä¢ B√≠blias de Estudo\n‚Ä¢ Livros Crist√£os\n‚Ä¢ Devocionais\n\nüéµ *M√≠dia e M√∫sica:*\n‚Ä¢ CDs de Louvor\n‚Ä¢ DVDs de Prega√ß√µes\n‚Ä¢ Mensagens em √Åudio\n\nüëï *Produtos Personalizados:*\n‚Ä¢ Camisetas CFC PUSH\n‚Ä¢ Canecas e Acess√≥rios\n‚Ä¢ Material de Escola B√≠blica\n\n*Encomendas:*\nüìû +258 84 600 7000\n‚úâÔ∏è store@cfcpush.org\n\n*Local:* Sede CFC PUSH - Loja\n\nDigite [#] para menu principal`,
          };

        case "13":
          return {
            text: `üìç *LOCALIZA√á√ÉO E CONTATO*\n\n*Endere√ßo da Sede:*\nüèõÔ∏è CFC PUSH - Igreja da Fam√≠lia Crist√£\nAv. 25 de Setembro, 1234\nMaputo, Mo√ßambique\n\n*Coordenadas GPS:*\n-25.9689, 32.5695\n\n*Como Chegar:*\nüöå *Transporte P√∫blico:*\n‚Ä¢ Chapas: Linhas 25, 32, 44\n‚Ä¢ Paragem: Av. 25 de Setembro\n\nüöó *Estacionamento:*\nGratuito dispon√≠vel no local\n\n*Contatos Gerais:*\nüìû +258 84 300 4000\n‚úâÔ∏è info@cfcpush.org\nüåê www.cfcpush.org\n\nDigite [#] para menu principal`,
          };

        // ‚úÖ CORRE√á√ÉO: Op√ß√£o 14 = PUSH Invest, Op√ß√£o 15 = Encerrar
        case "14":
          await UserStateService.setState(phone, "PUSH_INVEST_MENU");
          return await this.handlePushInvestMenu("", phone);

        case "15":
          await UserStateService.deleteState(phone);
          return {
            text: "üëã *ATENDIMENTO ENCERRADO!*\n\nObrigado por contactar a *CFC PUSH - Igreja da Fam√≠lia Crist√£*! üôè\n\nQue Deus te aben√ßoe ricamente e estamos sempre aqui para servir!\n\n*Shalom!* ‚ú®\n\nPara reiniciar, digite qualquer mensagem.",
          };

        default:
          return {
            text: '‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a 15 ou "#" para menu.',
          };
      }
    }

    // Se n√£o for uma op√ß√£o num√©rica, verificar se √© texto dos bot√µes
    const buttonResponses: { [key: string]: string } = {
      "ser membro": "1",
      ora√ß√£o: "2",
      pastor: "3",
      cultos: "4",
      contribuir: "5",
      visita: "6",
      assist√™ncia: "7",
      n√∫cleos: "8",
      minist√©rios: "9",
      evangeliza√ß√£o: "10",
      servos: "11",
      loja: "12",
      localiza√ß√£o: "13",
      "push invest": "14",
      encerrar: "15",
    };

    const lowerMessage = normalizedMessage.toLowerCase();
    if (buttonResponses[lowerMessage]) {
      // Recursivamente processar a op√ß√£o correspondente
      return await this.handleMainMenu(buttonResponses[lowerMessage], phone);
    }

    return {
      text: '‚ùå Op√ß√£o n√£o reconhecida. Digite "#" para ver o menu principal.',
    };
  }

  // üéØ SER MEMBRO - SUBMENU COM BOT√ïES
  private async handleSerMembroSubmenu(
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    const buttons = [
      { id: "Novo Membro", text: "üìù Novo Membro" },
      { id: "Transfer√™ncia", text: "üîÑ Transfer√™ncia" },
      { id: "Atualizar Dados", text: "‚úèÔ∏è Atualizar Dados" },
      { id: "Direitos e Deveres", text: "üìã Direitos/Deveres" },
      { id: "#", text: "üè† Menu Principal" },
    ];

    return {
      text: `üéØ *SER MEMBRO CFC PUSH*\n\n*Como podemos ajud√°-lo?*\n\nClique na op√ß√£o desejada:`,
      buttons: buttons,
    };
  }

  // üéØ NOVA SE√á√ÉO: PUSH INVEST - MENU PRINCIPAL
  private async handlePushInvestMenu(
    message: string,
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    const normalizedMessage = message.trim();

    // Se o usu√°rio j√° selecionou uma op√ß√£o
    if (normalizedMessage === "Voltar" || normalizedMessage === "#") {
      await UserStateService.setState(phone, "MAIN_MENU");
      return await this.handleMainMenu("", phone);
    }

    const opcoesPushInvest: { [key: string]: string } = {
      projetos: "PUSH_INVEST_PROJETOS",
      investir: "PUSH_INVEST_INVESTIR",
      contato: "PUSH_INVEST_CONTATO",
    };

    if (
      normalizedMessage &&
      opcoesPushInvest[normalizedMessage.toLowerCase()]
    ) {
      const opcao = normalizedMessage.toLowerCase();
      await UserStateService.setState(phone, opcoesPushInvest[opcao]);

      switch (opcao) {
        case "projetos":
          return {
            text: `üí∞ *PUSH INVEST - PROJETOS*\n\n*Em Breve!* üöß\n\nEstamos preparando projetos incr√≠veis de investimento e desenvolvimento para nossa comunidade.\n\n*Fique atento √†s novidades!*\n\nEm breve teremos:\n‚Ä¢ Projetos imobili√°rios\n‚Ä¢ Investimentos comunit√°rios\n‚Ä¢ Programas de desenvolvimento\n\nDigite [#] para voltar ao menu principal.`,
          };

        case "investir":
          return {
            text: `üí∞ *PUSH INVEST - COMO INVESTIR*\n\n*Informa√ß√£o em Desenvolvimento* üìà\n\nNossa equipe est√° trabalhando nas melhores oportunidades de investimento para voc√™.\n\n*Volte em breve para conhecer:*\n‚Ä¢ Modalidades de investimento\n‚Ä¢ Retornos esperados\n‚Ä¢ Processo de participa√ß√£o\n\nDigite [#] para voltar ao menu principal.`,
          };

        case "contato":
          return {
            text: `üí∞ *PUSH INVEST - CONTATO*\n\n*Equipe Especializada* üë®‚Äçüíº\n\nPara informa√ß√µes sobre investimentos, entre em contato com nossa equipe:\n\nüìû *Telefone:* +258 84 500 6000\n‚úâÔ∏è *Email:* invest@cfcpush.org\nüèõÔ∏è *Escrit√≥rio:* Sede CFC PUSH\n\n*Hor√°rio de Atendimento:*\nSegunda a Sexta: 9h-17h\nS√°bado: 9h-12h\n\nDigite [#] para voltar ao menu principal.`,
          };
      }
    }

    // Mostrar op√ß√µes com bot√µes
    const buttons = [
      { id: "Projetos", text: "üìä Projetos" },
      { id: "Investir", text: "üíµ Investir" },
      { id: "Contato", text: "üìû Contato" },
      { id: "Voltar", text: "‚Ü©Ô∏è Voltar" },
    ];

    return {
      text: `üí∞ *PUSH INVEST - INVESTIMENTOS CFC*\n\n*Crescimento com Prop√≥sito* üå±\n\nBem-vindo ao PUSH Invest - nosso departamento de investimentos e desenvolvimento financeiro.\n\n*O que voc√™ gostaria de saber?*\n\nüí° *Navega√ß√£o:* Digite [#] para menu principal`,
      buttons: buttons,
    };
  }

  // üéØ PUSH INVEST - PROJETOS
  private async handlePushInvestProjetos(
    message: string,
    phone: string
  ): Promise<string> {
    await UserStateService.resetToMainMenu(phone);

    return `üí∞ *PUSH INVEST - PROJETOS*\n\n*Em Desenvolvimento* üöß\n\nEstamos criando oportunidades de investimento que beneficiem nossa comunidade e glorifiquem a Deus.\n\n*√Åreas de Atua√ß√£o Futura:*\n‚Ä¢ Desenvolvimento imobili√°rio\n‚Ä¢ Projetos comunit√°rios\n‚Ä¢ Investimentos sustent√°veis\n‚Ä¢ Programas de microcr√©dito\n\nüìû *Para mais informa√ß√µes:*\n+258 84 500 6000\ninvest@cfcpush.org\n\n*Volte em breve para novidades!*\n\nDigite [#] para menu principal.`;
  }

  // üéØ PUSH INVEST - INVESTIR
  private async handlePushInvestInvestir(
    message: string,
    phone: string
  ): Promise<string> {
    await UserStateService.resetToMainMenu(phone);

    return `üí∞ *PUSH INVEST - COMO INVESTIR*\n\n*Informa√ß√µes em Desenvolvimento* üìà\n\nEstamos estruturando as melhores op√ß√µes de investimento para nossos membros e parceiros.\n\n*Em Breve Ofereceremos:*\n‚Ä¢ Diversas modalidades\n‚Ä¢ Planos de investimento\n‚Ä¢ Acompanhamento profissional\n‚Ä¢ Transpar√™ncia total\n\nüíº *Contato para Investidores:*\nüìû +258 84 500 6000\n‚úâÔ∏è invest@cfcpush.org\n\n*Deus aben√ßoe seus investimentos!*\n\nDigite [#] para menu principal.`;
  }

  // üéØ PUSH INVEST - CONTATO
  private async handlePushInvestContato(
    message: string,
    phone: string
  ): Promise<string> {
    await UserStateService.resetToMainMenu(phone);

    return `üí∞ *PUSH INVEST - CONTATO*\n\n*Fale com Nossa Equipe* üë®‚Äçüíº\n\n*Coordena√ß√£o PUSH Invest:*\nIrm√£o Jo√£o Investimentos\n\nüìû *Telefone:* +258 84 500 6000\n‚úâÔ∏è *Email:* invest@cfcpush.org\nüèõÔ∏è *Endere√ßo:* Sede CFC PUSH\nAv. 25 de Setembro, 1234\nMaputo\n\n*Hor√°rio de Atendimento:*\nSegunda a Sexta: 9h-17h\nS√°bado: 9h-12h\n\n*Estamos aqui para ajudar!*\n\nDigite [#] para menu principal.`;
  }

  // üéØ N√öCLEO - REGI√ÉO COM BOT√ïES
  private async handleNucleoRegiao(
    message: string,
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    const regions: { [key: string]: { info: string; contato: string } } = {
      "Zona Norte": {
        info: "üîî *N√öCLEO ZONA NORTE*\n\n*Respons√°vel:* Irm√£o Jo√£o\nüìû +258 84 123 4567\n\n*Local de Reuni√£o:*\nCentro Comunit√°rio do Bairro\nAv. Norte, 567\n\n*Hor√°rios:*\nQuintas: 18h00 - Estudo B√≠blico\nDomingos: 16h00 - Celebra√ß√£o",
        contato: "+258841234567",
      },
      "Zona Sul": {
        info: "üîî *N√öCLEO ZONA SUL*\n\n*Respons√°vel:* Irm√£ Maria\nüìû +258 84 234 5678\n\n*Local de Reuni√£o:*\nCasa de Fam√≠lia\nRua Sul, 890\n\n*Hor√°rios:*\nTer√ßas: 18h00 - Ora√ß√£o\nS√°bados: 17h00 - Comunh√£o",
        contato: "+258842345678",
      },
      "Zona Leste": {
        info: "üîî *N√öCLEO ZONA LESTE*\n\n*Respons√°vel:* Irm√£o Pedro\nüìû +258 84 345 6789\n\n*Local de Reuni√£o:*\nEscola Prim√°ria\nAv. Leste, 123\n\n*Hor√°rios:*\nQuartas: 17h30 - Estudo\nDomingos: 15h00 - Culto",
        contato: "+258843456789",
      },
      "Zona Oeste": {
        info: "üîî *N√öCLEO ZONA OESTE*\n\n*Respons√°vel:* Irm√£ Ana\nüìû +258 84 456 7890\n\n*Local de Reuni√£o:*\nSal√£o Paroquial\nRua Oeste, 456\n\n*Hor√°rios:*\nSegundas: 18h00 - Intercess√£o\nSextas: 17h00 - Jovens",
        contato: "+258844567890",
      },
      Centro: {
        info: "üîî *N√öCLEO CENTRO*\n\n*Respons√°vel:* Irm√£o Carlos\nüìû +258 84 567 8901\n\n*Local de Reuni√£o:*\nSede CFC PUSH\nAv. 25 de Setembro, 1234\n\n*Hor√°rios:*\nDiariamente - Programa√ß√£o Principal\nConsulte hor√°rios dos cultos",
        contato: "+258845678901",
      },
    };

    // Se o usu√°rio j√° selecionou uma regi√£o
    if (message && regions[message]) {
      await UserStateService.resetToMainMenu(phone);
      return {
        text: `${regions[message].info}\n\nüìç *Como Participar:*\nEntre em contato com o respons√°vel ou compare√ßa a uma reuni√£o!\n\nDigite [#] para menu principal.`,
      };
    }

    // Mostrar op√ß√µes com bot√µes
    const buttons = [
      { id: "Zona Norte", text: "üìç Zona Norte" },
      { id: "Zona Sul", text: "üìç Zona Sul" },
      { id: "Zona Leste", text: "üìç Zona Leste" },
      { id: "Zona Oeste", text: "üìç Zona Oeste" },
      { id: "Centro", text: "üìç Centro" },
      { id: "#", text: "üè† Menu Principal" },
    ];

    return {
      text: `üîî *REDE DE N√öCLEOS CFC PUSH*\n\nEm qual *regi√£o* voc√™ mora? *Clique no bot√£o da sua regi√£o:*\n\nEncontre o n√∫cleo mais pr√≥ximo de voc√™!`,
      buttons: buttons,
    };
  }

  // üéØ MINIST√âRIOS COM BOT√ïES
  private async handleMinisterioTipo(
    message: string,
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    const ministerios: { [key: string]: { info: string; contato: string } } = {
      "Louvor e Adora√ß√£o": {
        info: `üéµ *MINIST√âRIO DE LOUVOR E ADORA√á√ÉO*\n\n*Respons√°vel:* Irm√£o Jo√£o Silva\nüìû +258 84 123 4567\n‚úâÔ∏è louvor@cfcpush.org\n\n*Descri√ß√£o:*\nMinist√©rio dedicado √† m√∫sica, canto e adora√ß√£o atrav√©s das artes. Preparamos os momentos de louvor dos cultos e eventos especiais.\n\n*Requisitos:*\n‚Ä¢ Habilidade musical ou vocal\n‚Ä¢ Compromisso com ensaios\n‚Ä¢ Vida de adora√ß√£o\n\n*Hor√°rios:*\nEnsaios: Quintas 19h00\nApresenta√ß√µes: Domingos e eventos`,
        contato: "+258841234567",
      },
      Intercess√£o: {
        info: `üôè *MINIST√âRIO DE INTERCESS√ÉO*\n\n*Respons√°vel:* Irm√£ Maria Santos\nüìû +258 84 234 5678\n‚úâÔ∏è intercessao@cfcpush.org\n\n*Descri√ß√£o:*\nGrupo de ora√ß√£o que intercede pela igreja, lideran√ßa, membros e necessidades espec√≠ficas. Vig√≠lias e cadeias de ora√ß√£o.\n\n*Requisitos:*\n‚Ä¢ Vida de ora√ß√£o\n‚Ä¢ Compromisso com hor√°rios\n‚Ä¢ Discri√ß√£o e f√©\n\n*Hor√°rios:*\nReuni√µes: Segundas 18h00\nVig√≠lias: √öltimo S√°bado do m√™s`,
        contato: "+258842345678",
      },
      "CFC Youth": {
        info: `üî• *CFC YOUTH - MINIST√âRIO JOVEM*\n\n*Respons√°vel:* Irm√£o Pedro Mondlane\nüìû +258 84 345 6789\n‚úâÔ∏è youth@cfcpush.org\n\n*Descri√ß√£o:*\nMinist√©rio para jovens de 15-30 anos. Encontros, estudos, eventos sociais e projetos mission√°rios.\n\n*Requisitos:*\n‚Ä¢ Idade: 15-30 anos\n‚Ä¢ Vontade de servir\n‚Ä¢ Participa√ß√£o ativa\n\n*Hor√°rios:*\nCulto Jovem: Sextas 18h00\nEncontros: S√°bados 15h00`,
        contato: "+258843456789",
      },
      "CFC Kids": {
        info: `üë∂ *CFC KIDS - MINIST√âRIO INFANTIL*\n\n*Respons√°vel:* Irm√£ Ana Pereira\nüìû +258 84 456 7890\n‚úâÔ∏è kids@cfcpush.org\n\n*Descri√ß√£o:*\nMinist√©rio para crian√ßas de 3-12 anos. Escola B√≠blica Infantil, atividades l√∫dicas e ensino crist√£o adaptado.\n\n*Requisitos para volunt√°rios:*\n‚Ä¢ Amor por crian√ßas\n‚Ä¢ Paci√™ncia e criatividade\n‚Ä¢ Check-up de seguran√ßa\n\n*Hor√°rios:*\nDomingos: 9h00-12h00\nAtividades: S√°bados 10h00`,
        contato: "+258844567890",
      },
      Social: {
        info: `ü§ù *MINIST√âRIO DE A√á√ÉO SOCIAL*\n\n*Respons√°vel:* Irm√£o Carlos Nhaca\nüìû +258 84 567 8901\n‚úâÔ∏è social@cfcpush.org\n\n*Descri√ß√£o:*\nA√ß√µes sociais na comunidade: distribui√ß√£o de alimentos, visitas a hospitais, apoio a fam√≠lias carentes e projetos de desenvolvimento.\n\n*Requisitos:*\n‚Ä¢ Compaix√£o e servi√ßo\n‚Ä¢ Disponibilidade para visitas\n‚Ä¢ Trabalho em equipe\n\n*Hor√°rios:*\nReuni√µes: Ter√ßas 17h00\nA√ß√µes: S√°bados 8h00-12h00`,
        contato: "+258845678901",
      },
    };

    // Se o usu√°rio j√° selecionou um minist√©rio
    if (message && ministerios[message]) {
      await UserStateService.resetToMainMenu(phone);
      return {
        text: `${ministerios[message].info}\n\nüìç *Como Participar:*\nEntre em contato com o respons√°vel ou compare√ßa a uma reuni√£o para conhecer o minist√©rio!\n\nDigite [#] para menu principal.`,
      };
    }

    // Mostrar op√ß√µes com bot√µes
    const buttons = [
      { id: "Louvor e Adora√ß√£o", text: "üéµ Louvor" },
      { id: "Intercess√£o", text: "üôè Intercess√£o" },
      { id: "CFC Youth", text: "üî• Juventude" },
      { id: "CFC Kids", text: "üë∂ Infantil" },
      { id: "Social", text: "ü§ù Social" },
      { id: "#", text: "üè† Menu Principal" },
    ];

    return {
      text: `üéµ *MINIST√âRIOS CFC PUSH*\n\n*Clique no minist√©rio de seu interesse:*\n\nEnvolva-se no servi√ßo √† Deus e √† comunidade! Cada minist√©rio tem seu prop√≥sito √∫nico.`,
      buttons: buttons,
    };
  }

  // üéØ ORA√á√ÉO - TIPO COM BOT√ïES
  private async handleOracaoTipo(
    message: string,
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    const tiposOracao: { [key: string]: string } = {
      Sa√∫de: "saude",
      Fam√≠lia: "familia",
      Finan√ßas: "financas",
      Outros: "outros",
    };

    // Se o usu√°rio j√° selecionou um tipo
    if (message && tiposOracao[message]) {
      await UserStateService.updateData(phone, {
        prayerType: tiposOracao[message],
      });

      if (message === "Fam√≠lia") {
        await UserStateService.setState(phone, "ORACAO_NOME_FAMILIA");
        return {
          text: `‚úÖ *Ora√ß√£o pela Fam√≠lia* selecionada!\n\n*Digite o nome do membro da fam√≠lia* pelo qual deseja ora√ß√£o:\n(ex: Meu filho Jo√£o, Minha esposa Maria, etc.)`,
        };
      } else {
        await UserStateService.setState(phone, "ORACAO_DETALHE");
        return {
          text: `‚úÖ *${message}* selecionado!\n\n*Agora descreva seu pedido de ora√ß√£o:*\n\nPor favor, escreva detalhadamente sua necessidade:`,
        };
      }
    }

    // Mostrar op√ß√µes com bot√µes
    const buttons = [
      { id: "Sa√∫de", text: "‚ù§Ô∏è Sa√∫de" },
      { id: "Fam√≠lia", text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Fam√≠lia" },
      { id: "Finan√ßas", text: "üí∞ Finan√ßas" },
      { id: "Outros", text: "üìù Outros" },
      { id: "#", text: "üè† Menu Principal" },
    ];

    return {
      text: `üôè *PEDIDO DE ORA√á√ÉO*\n\n*Para qual √°rea voc√™ precisa de ora√ß√£o?*\n\nClique no tipo correspondente:\n\nNossa equipe de intercess√£o est√° pronta para orar por voc√™!`,
      buttons: buttons,
    };
  }

  // üéØ ASSIST√äNCIA - TIPO COM BOT√ïES
  private async handleAssistenciaTipo(
    message: string,
    phone: string
  ): Promise<{ text: string; buttons?: any[] }> {
    const tiposAssistencia: { [key: string]: string } = {
      Alimentar: "assistencia_alimentar",
      M√©dica: "assistencia_medica",
      Jur√≠dica: "assistencia_juridica",
      Outra: "assistencia_outra",
    };

    // Se o usu√°rio j√° selecionou um tipo
    if (message && tiposAssistencia[message]) {
      await UserStateService.updateData(phone, {
        assistanceType: tiposAssistencia[message],
      });
      await UserStateService.setState(phone, "ASSISTENCIA_DETALHE");

      return {
        text: `‚úÖ *Assist√™ncia ${message}* selecionada!\n\n*Descreva sua necessidade:*\n\nPor favor, forne√ßa detalhes sobre sua situa√ß√£o para podermos ajud√°-lo da melhor forma:`,
      };
    }

    // Mostrar op√ß√µes com bot√µes
    const buttons = [
      { id: "Alimentar", text: "üõí Alimentar" },
      { id: "M√©dica", text: "üè• M√©dica" },
      { id: "Jur√≠dica", text: "‚öñÔ∏è Jur√≠dica" },
      { id: "Outra", text: "üìù Outra" },
      { id: "#", text: "üè† Menu Principal" },
    ];

    return {
      text: `ü§ù *ASSIST√äNCIA SOCIAL CFC PUSH*\n\n*Que tipo de assist√™ncia voc√™ precisa?*\n\nClique na op√ß√£o correspondente:\n\nEstamos aqui para ajudar voc√™ e sua fam√≠lia!`,
      buttons: buttons,
    };
  }

  // üéØ CADASTRO - NOME
  private async handleCadastroNome(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message)) {
      return "‚ùå Nome vazio. Digite seu nome completo:";
    }

    const validation = this.isValidName(message);
    if (!validation.isValid) {
      return `${validation.error}\n\n*Digite seu nome completo novamente:*`;
    }

    await UserStateService.updateData(phone, { name: message.trim() });
    await UserStateService.setState(phone, "CADASTRO_DATA_NASCIMENTO");
    return `‚úÖ Nome v√°lido: *${message.trim()}*\n\nAgora digite sua *data de nascimento*:\n(ex: 15/08/1990)`;
  }

  // üéØ CADASTRO - DATA NASCIMENTO
  private async handleCadastroDataNascimento(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message)) {
      return "‚ùå Data vazia. Digite sua data de nascimento:";
    }

    const validation = this.isValidDate(message);
    if (!validation.isValid) {
      return `${validation.error}\n\n*Digite sua data de nascimento novamente:*`;
    }

    await UserStateService.updateData(phone, { dateOfBirth: message });
    await UserStateService.setState(phone, "CADASTRO_ESTADO_CIVIL");
    return `‚úÖ Data v√°lida!\n\nQual seu *estado civil*?\n\n[1] Solteiro(a)\n[2] Casado(a)\n[3] Divorciado(a)\n[4] Vi√∫vo(a)\n[5] Uni√£o de Facto`;
  }

  // üéØ CADASTRO - ESTADO CIVIL
  private async handleCadastroEstadoCivil(
    message: string,
    phone: string
  ): Promise<string> {
    const estados: { [key: string]: string } = {
      "1": "Solteiro(a)",
      "2": "Casado(a)",
      "3": "Divorciado(a)",
      "4": "Vi√∫vo(a)",
      "5": "Uni√£o de Facto",
    };

    if (estados[message]) {
      await UserStateService.updateData(phone, {
        maritalStatus: estados[message],
      });
      await UserStateService.setState(phone, "CADASTRO_ENDERECO");
      return `‚úÖ Estado civil registado: *${estados[message]}*\n\nAgora digite seu *endere√ßo completo*:\n(ex: Av. Principal, 123 - Bairro, Cidade)`;
    } else {
      return "‚ùå Op√ß√£o inv√°lida. Digite o n√∫mero do estado civil:\n[1] Solteiro(a)\n[2] Casado(a)\n[3] Divorciado(a)\n[4] Vi√∫vo(a)\n[5] Uni√£o de Facto";
    }
  }

  // üéØ CADASTRO - ENDERE√áO
  private async handleCadastroEndereco(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message) || message.trim().length < 10) {
      return "‚ùå Endere√ßo muito curto. Digite um endere√ßo completo (m√≠n. 10 caracteres):\n(ex: Av. 25 de Setembro, 1234 - Maputo)";
    }

    await UserStateService.updateData(phone, { address: message.trim() });
    await UserStateService.setState(phone, "CADASTRO_PROFISSAO");
    return `‚úÖ Endere√ßo registado!\n\nQual sua *profiss√£o* ou *ocupa√ß√£o*?`;
  }

  // üéØ CADASTRO - PROFISS√ÉO
  private async handleCadastroProfissao(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message)) {
      return "‚ùå Profiss√£o vazia. Digite sua profiss√£o:";
    }

    await UserStateService.updateData(phone, { profession: message.trim() });
    await UserStateService.setState(phone, "CADASTRO_COMO_CONHECEU");
    return `‚úÖ Profiss√£o registada: *${message.trim()}*\n\n*Como conheceu a CFC PUSH?*\n\n[1] Amigo/Familiar\n[2] Rede Social\n[3] Visita/Evento\n[4] Propaganda\n[5] Outro`;
  }

  // üéØ CADASTRO - COMO CONHECEU
  private async handleCadastroComoConheceu(
    message: string,
    phone: string
  ): Promise<string> {
    const opcoes: { [key: string]: string } = {
      "1": "Amigo/Familiar",
      "2": "Rede Social",
      "3": "Visita/Evento",
      "4": "Propaganda",
      "5": "Outro",
    };

    if (opcoes[message]) {
      const session = await UserStateService.getState(phone);
      const userData = session?.data || {};

      // ‚úÖ SALVAR CADASTRO COMPLETO
      try {
        await UserStateService.saveUser(phone, {
          name: userData.name,
          dateOfBirth: userData.dateOfBirth
            ? new Date(userData.dateOfBirth.split("/").reverse().join("-"))
            : undefined,
          maritalStatus: userData.maritalStatus,
          address: userData.address,
          profession: userData.profession,
          howFoundChurch: opcoes[message],
          phone: this.formatPhoneNumber(phone),
          registrationDate: new Date(),
          isMember: true,
          lastInteraction: new Date(),
        });

        logger.info(`‚úÖ Novo membro cadastrado: ${userData.name} (${phone})`);
      } catch (error) {
        logger.error("‚ùå Erro ao salvar cadastro:", error);
      }

      await UserStateService.resetToMainMenu(phone);

      return `üéâ *CADASTRO CONCLU√çDO!*\n\n*Irm√£o(√£) ${userData.name}*, seu cadastro foi realizado com sucesso!\n\n*Dados registados:*\n‚Ä¢ Nome: ${userData.name}\n‚Ä¢ Data Nasc.: ${userData.dateOfBirth}\n‚Ä¢ Estado Civil: ${userData.maritalStatus}\n‚Ä¢ Profiss√£o: ${userData.profession}\n‚Ä¢ Como conheceu: ${opcoes[message]}\n\nüìû Nossa equipe entrar√° em contato para boas-vindas e integra√ß√£o!\n\n*Bem-vindo(a) √† fam√≠lia CFC PUSH!* üôè\n\nDigite [#] para menu principal.`;
    } else {
      return "‚ùå Op√ß√£o inv√°lida. Digite como conheceu a igreja:\n[1] Amigo/Familiar\n[2] Rede Social\n[3] Visita/Evento\n[4] Propaganda\n[5] Outro";
    }
  }

  // üéØ ORA√á√ÉO - NOME DA FAM√çLIA
  private async handleOracaoNomeFamilia(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message)) {
      return "‚ùå Nome vazio. Digite o nome do membro da fam√≠lia:";
    }

    await UserStateService.updateData(phone, {
      prayerFamilyName: message.trim(),
    });
    await UserStateService.setState(phone, "ORACAO_DETALHE");
    return `‚úÖ Nome registado: *${message.trim()}*\n\n*Agora descreva o pedido de ora√ß√£o para ${message.trim()}:*`;
  }

  // üéØ ORA√á√ÉO - DETALHE
  private async handleOracaoDetalhe(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message) || message.trim().length < 5) {
      return "‚ùå Pedido muito curto. Descreva melhor sua necessidade (m√≠n. 5 caracteres):";
    }

    await UserStateService.updateData(phone, { prayerDetail: message.trim() });
    await UserStateService.setState(phone, "ORACAO_ANONIMATO");

    return `‚úÖ Pedido registado!\n\n*Deseja permanecer an√≥nimo?*\n\n[1] Sim - Seu nome n√£o ser√° compartilhado\n[2] N√£o - Podemos usar seu nome no pedido\n\nEscolha uma op√ß√£o:`;
  }

  // üéØ ORA√á√ÉO - ANONIMATO
  private async handleOracaoAnonimato(
    message: string,
    phone: string
  ): Promise<string> {
    const session = await UserStateService.getState(phone);
    const userData = session?.data || {};

    let userName = "An√≥nimo";
    let isAnonymous = true;

    if (message === "2") {
      try {
        const user = await UserStateService.getUser(phone);
        userName = user?.name || "Irm√£o/Irm√£";
        isAnonymous = false;
      } catch (error) {
        logger.error("‚ùå Erro ao buscar usu√°rio:", error);
      }
    }

    // ‚úÖ SALVAR PEDIDO DE ORA√á√ÉO
    try {
      await UserStateService.savePrayerRequest({
        userPhone: this.formatPhoneNumber(phone),
        userName: isAnonymous ? "An√≥nimo" : userName,
        description: userData.prayerDetail || "",
        type: (userData.prayerType as any) || "outros",
        familyMemberName: userData.prayerFamilyName,
        status: "pendente",
        isAnonymous: isAnonymous,
        prayerCount: 0,
        createdAt: new Date(),
      });

      logger.info(
        `üôè Pedido de ora√ß√£o salvo: ${userName} - ${userData.prayerType}`
      );
    } catch (error) {
      logger.error("‚ùå Erro ao salvar pedido:", error);
      return "‚ùå Erro ao processar seu pedido. Tente novamente.";
    }

    await UserStateService.resetToMainMenu(phone);

    return `‚úÖ *PEDIDO DE ORA√á√ÉO ENVIADO!*\n\n*Irm√£o(√£) ${userName}*, nosso time de intercess√£o j√° est√° orando por voc√™!\n\n*Detalhes do pedido:*\n‚Ä¢ Tipo: ${
      userData.prayerType
    }\n${
      userData.prayerFamilyName ? `‚Ä¢ Para: ${userData.prayerFamilyName}\n` : ""
    }‚Ä¢ Seu pedido: "${
      userData.prayerDetail
    }"\n\nüôè *Deus te aben√ßoe e guarde!*\n\nVoc√™ receber√° atualiza√ß√µes sobre seu pedido.\n\nDigite [#] para menu principal.`;
  }

  // üéØ ASSIST√äNCIA - DETALHE
  private async handleAssistenciaDetalhe(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message) || message.trim().length < 10) {
      return "‚ùå Descri√ß√£o muito curta. Descreva melhor sua necessidade (m√≠n. 10 caracteres):";
    }

    const session = await UserStateService.getState(phone);
    const userData = session?.data || {};

    // ‚úÖ SALVAR SOLICITA√á√ÉO DE ASSIST√äNCIA
    try {
      let userName = "An√≥nimo";
      try {
        const user = await UserStateService.getUser(phone);
        userName = user?.name || "Irm√£o/Irm√£";
      } catch (error) {
        logger.error("‚ùå Erro ao buscar usu√°rio:", error);
      }

      logger.info(
        `ü§ù Assist√™ncia solicitada: ${userName} - ${userData.assistanceType} - ${message}`
      );
    } catch (error) {
      logger.error("‚ùå Erro ao salvar assist√™ncia:", error);
    }

    await UserStateService.resetToMainMenu(phone);

    return `‚úÖ *SOLICITA√á√ÉO DE ASSIST√äNCIA ENVIADA!*\n\n*Tipo:* ${userData.assistanceType}\n*Descri√ß√£o:* ${message}\n\nüìû Nossa equipe social entrar√° em contato em at√© 48 horas para avaliar sua situa√ß√£o e fornecer o apoio necess√°rio.\n\n*CFC PUSH - Servindo com Amor!* ‚ù§Ô∏è\n\nDigite [#] para menu principal.`;
  }

  // üéØ VISITA - DATA
  private async handleVisitaData(
    message: string,
    phone: string
  ): Promise<string> {
    const validation = this.isValidFutureDate(message);
    if (!validation.isValid) {
      return `${validation.error}\n\n*Digite a data novamente:* (ex: 25/12/2024)`;
    }

    await UserStateService.updateData(phone, { visitDate: message });
    await UserStateService.setState(phone, "VISITA_MOTIVO");
    return `‚úÖ Data v√°lida: *${message}*\n\nQual o *motivo da visita pastoral*?`;
  }

  // üéØ VISITA - MOTIVO
  private async handleVisitaMotivo(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message) || message.trim().length < 5) {
      return "‚ùå Motivo muito curto. Descreva melhor o motivo (m√≠n. 5 caracteres):";
    }

    const session = await UserStateService.getState(phone);
    const visitDate = session?.data?.visitDate;

    // ‚úÖ SALVAR SOLICITA√á√ÉO DE VISITA
    try {
      let userName = "A confirmar";
      try {
        const user = await UserStateService.getUser(phone);
        userName = user?.name || "Irm√£o/Irm√£";
      } catch (error) {
        logger.error("‚ùå Erro ao buscar usu√°rio:", error);
      }

      logger.info(
        `üè† Visita solicitada: ${userName} - ${visitDate} - ${message}`
      );
    } catch (error) {
      logger.error("‚ùå Erro ao salvar visita:", error);
    }

    await UserStateService.resetToMainMenu(phone);

    return `‚úÖ *VISITA PASTORAL SOLICITADA!*\n\n*Data preferida:* ${visitDate}\n*Motivo:* ${message}\n\nüìû Nossa equipe pastoral entrar√° em contato em at√© 24 horas para confirmar a visita e combinar os detalhes.\n\n*Deus aben√ßoe seu lar!* üè†‚ú®\n\nDigite [#] para menu principal.`;
  }

  // üéØ TRANSFER√äNCIA - IGREJA ORIGEM
  private async handleTransferenciaIgrejaOrigem(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message)) {
      return "‚ùå Nome vazio. Digite o nome da sua igreja de origem:";
    }

    await UserStateService.updateData(phone, {
      previousChurch: message.trim(),
    });
    await UserStateService.setState(phone, "TRANSFERENCIA_MOTIVO");
    return `‚úÖ Igreja de origem registada: *${message.trim()}*\n\nQual o *motivo da transfer√™ncia*?`;
  }

  // üéØ TRANSFER√äNCIA - MOTIVO
  private async handleTransferenciaMotivo(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message)) {
      return "‚ùå Motivo vazio. Digite o motivo da transfer√™ncia:";
    }

    const session = await UserStateService.getState(phone);
    const userData = session?.data || {};

    // ‚úÖ PROCESSAR TRANSFER√äNCIA
    try {
      let userName = "A confirmar";
      try {
        const user = await UserStateService.getUser(phone);
        userName = user?.name || "Irm√£o/Irm√£";
      } catch (error) {
        logger.error("‚ùå Erro ao buscar usu√°rio:", error);
      }

      logger.info(
        `üîÑ Transfer√™ncia solicitada: ${userName} - ${userData.previousChurch} - ${message}`
      );
    } catch (error) {
      logger.error("‚ùå Erro ao processar transfer√™ncia:", error);
    }

    await UserStateService.resetToMainMenu(phone);

    return `‚úÖ *SOLICITA√á√ÉO DE TRANSFER√äNCIA ENVIADA!*\n\n*Igreja de origem:* ${userData.previousChurch}\n*Motivo:* ${message}\n\nüìû Nossa equipe entrar√° em contato para completar o processo de transfer√™ncia e integra√ß√£o.\n\n*Bem-vindo(a) √† fam√≠lia CFC PUSH!* üôè\n\nDigite [#] para menu principal.`;
  }

  // üéØ ATUALIZA√á√ÉO DADOS - TIPO
  private async handleAtualizacaoDadosTipo(
    message: string,
    phone: string
  ): Promise<string> {
    const opcoes: { [key: string]: string } = {
      "1": "name",
      "2": "address",
      "3": "phone",
      "4": "profession",
      "5": "maritalStatus",
    };

    if (opcoes[message]) {
      await UserStateService.updateData(phone, {
        updateField: opcoes[message],
      });
      await UserStateService.setState(phone, "ATUALIZACAO_DADOS_NOVO_VALOR");
      const fieldNames: { [key: string]: string } = {
        name: "Nome",
        address: "Endere√ßo",
        phone: "Telefone",
        profession: "Profiss√£o",
        maritalStatus: "Estado Civil",
      };
      return `‚úÖ Campo selecionado: *${
        fieldNames[opcoes[message]]
      }*\n\nDigite o *novo valor* para ${fieldNames[
        opcoes[message]
      ].toLowerCase()}:`;
    } else {
      return "‚ùå Op√ß√£o inv√°lida. Digite o campo que deseja atualizar:\n[1] Nome\n[2] Endere√ßo\n[3] Telefone\n[4] Profiss√£o\n[5] Estado Civil";
    }
  }

  // üéØ ATUALIZA√á√ÉO DADOS - NOVO VALOR
  private async handleAtualizacaoDadosNovoValor(
    message: string,
    phone: string
  ): Promise<string> {
    if (!this.isValidMessage(message)) {
      return "‚ùå Valor vazio. Digite o novo valor:";
    }

    const session = await UserStateService.getState(phone);
    const userData = session?.data || {};

    // ‚úÖ ATUALIZAR DADOS
    try {
      const user = await UserStateService.getUser(phone);
      if (user) {
        const updateData: any = {};
        updateData[userData.updateField || "name"] = message.trim();
        updateData.lastInteraction = new Date();

        await UserStateService.saveUser(phone, updateData);
        logger.info(
          `‚úèÔ∏è Dados atualizados: ${phone} - ${userData.updateField}: ${message}`
        );
      }
    } catch (error) {
      logger.error("‚ùå Erro ao atualizar dados:", error);
    }

    await UserStateService.resetToMainMenu(phone);

    const fieldNames: { [key: string]: string } = {
      name: "Nome",
      address: "Endere√ßo",
      phone: "Telefone",
      profession: "Profiss√£o",
      maritalStatus: "Estado Civil",
    };

    return `‚úÖ *DADOS ATUALIZADOS COM SUCESSO!*\n\n*Campo:* ${
      fieldNames[userData.updateField || "name"]
    }\n*Novo valor:* ${message}\n\nSeus dados foram atualizados em nosso sistema.\n\nDigite [#] para menu principal.`;
  }

  // üéØ DIREITOS E DEVERES
  private async handleDireitosDeveres(
    message: string,
    phone: string
  ): Promise<string> {
    await UserStateService.resetToMainMenu(phone);

    return `üìã *DIREITOS E DEVERES DOS MEMBROS*\n\n*DIREITOS:*\n‚Ä¢ Participar dos cultos e atividades\n‚Ä¢ Votar em assembleias\n‚Ä¢ Receber visita pastoral\n‚Ä¢ Usufruir dos benef√≠cios espirituais\n‚Ä¢ Participar dos minist√©rios\n‚Ä¢ Receber aconselhamento pastoral\n\n*DEVERES:*\n‚Ä¢ Frequ√™ncia aos cultos\n‚Ä¢ Contribui√ß√£o financeira\n‚Ä¢ Participa√ß√£o ativa\n‚Ä¢ Testemunho crist√£o\n‚Ä¢ Respeito √† lideran√ßa\n‚Ä¢ Compromisso com a doutrina\n\n*CFC PUSH - Uma fam√≠lia em Cristo!* üôè\n\nDigite [#] para menu principal.`;
  }

  // ‚úÖ VALIDA√á√ÉO DE MENSAGEM
  private isValidMessage(message: string): boolean {
    if (!message || typeof message !== "string") return false;
    const cleanMessage = message.trim();
    return cleanMessage.length > 0 && cleanMessage.length <= 500;
  }

  // ‚úÖ VALIDA√á√ÉO DE OP√á√ÉO NUM√âRICA (ATUALIZADO PARA 15)
  private isValidMenuOption(
    option: string,
    min: number = 1,
    max: number = 15
  ): boolean {
    const num = parseInt(option, 10);
    return !isNaN(num) && num >= min && num <= max;
  }

  // ‚úÖ VALIDA√á√ÉO DE NOME
  private isValidName(name: string): { isValid: boolean; error?: string } {
    if (!this.isValidMessage(name)) {
      return { isValid: false, error: "‚ùå Nome vazio ou inv√°lido." };
    }

    const cleanName = name.trim();

    if (cleanName.length < 4) {
      return { isValid: false, error: "‚ùå Nome muito curto. M√≠nimo 4 letras." };
    }

    const nameRegex = /^[A-Za-z√Ä-√ø\s']+$/;
    if (!nameRegex.test(cleanName)) {
      return {
        isValid: false,
        error: "‚ùå Use apenas letras, espa√ßos e ap√≥strofos.",
      };
    }

    const words = cleanName.split(/\s+/).filter((word) => word.length > 0);
    if (words.length < 2) {
      return { isValid: false, error: "‚ùå Digite nome e sobrenome completos." };
    }

    return { isValid: true };
  }

  // ‚úÖ VALIDA√á√ÉO DE DATA
  private isValidDate(dateStr: string): { isValid: boolean; error?: string } {
    if (!this.isValidMessage(dateStr)) {
      return { isValid: false, error: "‚ùå Data vazia ou inv√°lida." };
    }

    const dateRegex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
    const match = dateStr.match(dateRegex);

    if (!match) {
      return { isValid: false, error: "‚ùå Use DD/MM/AAAA (ex: 15/08/1990)" };
    }

    const day = parseInt(match[1], 10);
    const month = parseInt(match[2], 10);
    const year = parseInt(match[3], 10);

    if (month < 1 || month > 12)
      return { isValid: false, error: "‚ùå M√™s inv√°lido (01-12)." };
    if (day < 1 || day > 31)
      return { isValid: false, error: "‚ùå Dia inv√°lido (01-31)." };
    if (year < 1900 || year > new Date().getFullYear()) {
      return { isValid: false, error: "‚ùå Ano inv√°lido (1900-ano atual)." };
    }

    const date = new Date(year, month - 1, day);
    if (
      date.getDate() !== day ||
      date.getMonth() !== month - 1 ||
      date.getFullYear() !== year
    ) {
      return { isValid: false, error: "‚ùå Data inexistente." };
    }

    return { isValid: true };
  }

  // ‚úÖ VALIDA√á√ÉO DE DATA FUTURA
  private isValidFutureDate(dateStr: string): {
    isValid: boolean;
    error?: string;
  } {
    const dateValidation = this.isValidDate(dateStr);
    if (!dateValidation.isValid) return dateValidation;

    const [day, month, year] = dateStr.split("/").map(Number);
    const inputDate = new Date(year, month - 1, day);
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    if (inputDate < today) {
      return { isValid: false, error: "‚ùå Data passada. Use uma data futura." };
    }

    const maxDate = new Date();
    maxDate.setMonth(maxDate.getMonth() + 3);
    if (inputDate > maxDate) {
      return {
        isValid: false,
        error: "‚ùå Data muito distante (m√°x. 3 meses).",
      };
    }

    return { isValid: true };
  }

  // üéØ FORMATAR MENU PRINCIPAL EM TEXTO
  private formatMainMenuText(): string {
    const menu = MenuManager.getMainMenu();
    let menuText = "üìã *MENU CFC PUSH*\n\n";

    menu.sections.forEach((section) => {
      menuText += `*${section.title}*\n`;
      section.rows.forEach((row) => {
        menuText += `${row.title}\n`;
      });
      menuText += "\n";
    });

    menuText += "üí° Digite o n√∫mero da op√ß√£o ou [#] para navega√ß√£o";
    return menuText;
  }

  // ‚úÖ FORMATA√á√ÉO DE TELEFONE
  private formatPhoneNumber(phone: string): string {
    const cleanPhone = phone.replace(/\D/g, "");

    if (cleanPhone.startsWith("258")) {
      return `+${cleanPhone}`;
    } else if (cleanPhone.startsWith("55")) {
      return `+${cleanPhone}`;
    } else if (cleanPhone.startsWith("1")) {
      return `+${cleanPhone}`;
    } else {
      // Assume Mo√ßambique se n√£o tiver c√≥digo
      return `+258${cleanPhone}`;
    }
  }
}

// ‚úÖ CORRE√á√ÉO CR√çTICA: Exportar a CLASSE para poder instanciar
export default ChatController;
